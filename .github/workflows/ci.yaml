name: E-Commerce container build

on:
  push:
    branches:
      - development

jobs:
  build:
    runs-on: self-hosted  # The job runs on a self-hosted runner to avoid cost for the case study

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read version from manifest.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' manifest.json)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build Docker image (builder stage)
      - name: Build Docker image (builder stage)
        run: docker buildx build --load --target builder -t wp-release:builder .

      # Run PHPUnit tests using the builder image
      - name: Run PHP Unit Tests
        run: docker run --rm wp-release:builder vendor/bin/phpunit --configuration phpunit.xml

      # Build the final Docker image (production stage)
      - name: Build final Docker image (production stage)
        run: docker buildx build --target production -t wp-release:${{ env.VERSION }} . --load
        # Load the image into the local Docker instance for further use

      # Security scan with Trivy
      - name: Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: wp-release:${{ env.VERSION }}

      # Tag and push Docker image to local registry (for testing the pipeline without cost)
      - name: Tag and push Docker image
        run: |
          docker tag wp-release:${{ env.VERSION }} localhost:5000/wp-release:${{ env.VERSION }}
          docker push localhost:5000/wp-release:${{ env.VERSION }}

      # Optionally push the Docker image to GCR
      # - name: Push Docker image to GCR
      #   uses: google-github-actions/auth@v1
      #   with:
      #     credentials_json: ${{ secrets.GCP_SA_KEY }}

      # - name: Configure Docker to use the Google Cloud CLI
      #   run: |
      #     echo "${{ secrets.GCP_SA_KEY }}" | docker login -u _json_key --password-stdin https://gcr.io
      #     docker tag wp-release:${{ env.VERSION }} gcr.io/my-gcp-project/wp-release:${{ env.VERSION }}
      #     docker push gcr.io/my-gcp-project/wp-release:${{ env.VERSION }}

      - name: Tag Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: "WordPress Release v${{ env.VERSION }}"
          draft: false
          prerelease: false
